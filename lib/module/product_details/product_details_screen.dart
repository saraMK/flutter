import 'package:conditional_builder/conditional_builder.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_app2/layout/home/best_seller_layout.dart';import 'package:flutter_app2/layout/home/images_slider.dart';import 'package:flutter_app2/layout/shared/shared_layouts.dart';import 'package:flutter_app2/models/products/product_details_model.dart';import 'package:flutter_app2/module/product_details/cubit/product_details_cubit.dart';import 'package:flutter_app2/module/product_details/cubit/product_details_states.dart';import 'package:flutter_app2/module/product_details/custom_views/text_box_view.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:share/share.dart';import 'custom_views/checkboxes_view.dart';import 'custom_views/drop_down_list_vew.dart';class ProductDetailsScreen extends StatefulWidget {  @override  _ProductDetailsScreenState createState() => _ProductDetailsScreenState();}class _ProductDetailsScreenState extends State<ProductDetailsScreen> {  String productId = "";  @override  Widget build(BuildContext context) {    productId = ModalRoute.of(context).settings.arguments as String;    return Scaffold(        body: BlocProvider<ProductDetailsCubit>(            create: (context) =>                ProductDetailsCubit()..getProductDetails(productId),            child: BlocConsumer<ProductDetailsCubit, ProductDetailsStates>(                listener: (context, state) {},                builder: (context, state) {                  ProductDetailsCubit bloc = BlocProvider.of(context);                  return Container(                    color: Colors.white,                    child: ConditionalBuilder(                      condition: bloc.productModel != null,                      fallback: (context) => Center(                          child: CircularProgressIndicator(                        backgroundColor: Colors.red,                      )),                      builder: (context) => Scaffold(                        backgroundColor: Colors.white,                        body: CustomScrollView(                          slivers: [                            SliverAppBar(                                expandedHeight: 300.0,                                floating: true,                                snap: true,                                pinned: true,                                flexibleSpace: FlexibleSpaceBar(                                    background: Container(                                        child: PageView.builder(                                  itemBuilder: (context, index) =>                                      getImageWithCurve(                                          url: bloc.productModel.image[index]                                              .imageURL,                                          context: context,                                          height_: 300),                                  itemCount: bloc.productModel.image.length,                                  scrollDirection: Axis.horizontal,                                ))),                                backgroundColor: Colors.white,                                stretch: true,                                actions: <Widget>[                                  IconButton(                                    icon: const Icon(                                        Icons.shopping_cart_outlined),                                    tooltip: 'Add new entry',                                    onPressed: () {                                      /* ... */                                    },                                  ),                                ]),                            SliverList(                              delegate: SliverChildBuilderDelegate(                                (context, index) {                                  return Column(                                      mainAxisAlignment:                                          MainAxisAlignment.start,                                      crossAxisAlignment:                                          CrossAxisAlignment.start,                                      children: [                                        Padding(                                          padding: EdgeInsets.symmetric(horizontal: 10,vertical: 2),                                          child: Column(                                            mainAxisAlignment:                                                MainAxisAlignment.start,                                            crossAxisAlignment:                                                CrossAxisAlignment.start,                                            children: [                                              nameWidget(bloc),                                              SizedBox(                                                height: 8,                                              ),                                              priceWidget(bloc),                                              SizedBox(                                                height: 8,                                              ),                                              Text(                                                "Sku: ${bloc.productModel.sku}",                                                style: TextStyle(                                                    fontSize: 15,                                                    color: Colors.black,                                                    fontFamily:                                                        "Cairo_regular"),                                              ),                                            ],                                          ),                                        ),                                        Padding(                                            padding: EdgeInsets.symmetric(                                                horizontal: 10),                                            child: Column(children: dynamicViews(bloc)),                                            ),                                        SizedBox(                                          height: 8,                                        ),                                        line(),                                        textButtonWithIcon('Description'),                                        line(),                                        textButtonWithIcon('Size Gide'),                                        line(),                                        textButtonWithIcon('Return policy'),                                        line(),                                        ConditionalBuilder(                                          condition: bloc.productModel                                              .relatedProducts.isNotEmpty,                                          builder: (context) => Padding(                                              padding: EdgeInsets.all(10),                                              child: BestSeller(                                                isLight: true,                                                title: 'Related Products',                                                list: bloc.productModel                                                    .relatedProducts,                                              )),                                        )                                      ]);                                },                                childCount: 1,                              ),                            ),                          ],                        ),                        bottomNavigationBar: Padding(                          padding: EdgeInsets.symmetric(horizontal: 10),                            child: ElevatedButton(                          child: Text('Add to Cart',                          style: TextStyle(                            color: Colors.white,                            fontFamily: 'Cairo_regular'                          ),),                          style: ButtonStyle(                            backgroundColor:MaterialStateProperty.all(Colors.black),                          ),                          onPressed: () {                            return  Fluttertoast.showToast(                                msg: "item added to cart",                                toastLength: Toast.LENGTH_SHORT,                                gravity: ToastGravity.BOTTOM,                                timeInSecForIosWeb: 2,                                backgroundColor: Colors.black12,                                textColor: Colors.black,                                fontSize: 15.0,                            );                          },                        )),                      ),                    ),                  );                })));  }  Widget nameWidget(ProductDetailsCubit bloc) {    return Row(      children: [        Expanded(          flex: 1,          child: Text(            bloc.productModel.name,            style: TextStyle(                fontSize: 15, color: Colors.black, fontFamily: "Cairo_regular"),          ),        ),        IconButton(          icon: Icon(Icons.favorite_border),          onPressed: () {},        ),        IconButton(          icon: Icon(Icons.share),          onPressed: () {            Share.share(bloc.productModel.productURL);          },        ),      ],    );  }  Widget priceWidget(ProductDetailsCubit bloc) {    String stock = "Available";    if (bloc.productModel.stock == 0) stock = "out of stock";    return Row(      children: [        Text(          bloc.productModel.price,          style: TextStyle(              fontSize: 15, color: Colors.red[800], fontFamily: "Cairo_regular"),        ),        Spacer(),        Text(          stock,          style: TextStyle(              fontSize: 15, color: Colors.green[800], fontFamily: "Cairo_regular"),        ),      ],    );  }  Widget textButtonWithIcon(String txt) {    return Padding(        padding: EdgeInsets.all(8),        child: Row(children: [          Expanded(            flex: 1,            child: Text(              txt,              style: TextStyle(                  fontSize: 14, color: Colors.black, fontFamily: "Cairo_regular"),            ),          ),          Icon(Icons.keyboard_arrow_right, color: Colors.black)        ]));  }  Widget line() {    return SizedBox(      height: 5,      child: Container(        color: Colors.grey[100],      ),    );  }  List<Widget> dynamicViews(ProductDetailsCubit bloc) {    List<Widget> list=[];    if (bloc.productModel?.productAttributes?.isNotEmpty) {      print(bloc.productModel.productAttributes.length);      for (ProductAttributesModel model          in bloc.productModel?.productAttributes) {        print(model.name);        list.add(Container(          width: double.infinity,            child: Column(          crossAxisAlignment: CrossAxisAlignment.start,          mainAxisAlignment: MainAxisAlignment.start,          mainAxisSize: MainAxisSize.max,          children: [addTitle(model.name), addCustomView(model)],        )));      }    }    return list;  }  Widget addTitle(String name) {    return Text(      name,      style: TextStyle(          fontSize: 15, color: Colors.black, fontFamily: "Cairo_regular"),    );  }  Widget addCustomView(ProductAttributesModel model) {    switch (model.type) {      case 'DropdownList':        return DropDownListVew(model);        break;      // case 'Datepicker':      //   break;      // case 'ColorSquares':      //   break;      case 'TextBox':        return TextBoxView(model);        break;      case 'MultilineTextbox':        return TextBoxView(model,isSingleLine: false,);        break;      case 'Checkboxes':        return CheckboxesView(model);        break;      // case 'RadioList':      // case 'SizeBox':      //   break;      // case 'ImageSquares':      //   break;    }    return addTitle('name');  }}